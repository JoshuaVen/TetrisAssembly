TITLE TETRIS (GAME EXE)
;-----------------------------------------------------------
STACKSEG SEGMENT PARA 'Stack'
  DW 32 DUP ('R7')
STACKSEG ENDS
;-----------------------------------------------------------
DATASEG SEGMENT PARA 'Data'
  MSG_AUTHOR DB "BY JOSHUA VEN AND NISHA ALEXIS, 2018 $"
  MSG_NEXT DB "NEXT $"
  MSG_LEFT DB "A - Left $"
  MSG_RIGHT DB "S - Right $"
  MSG_ROTATE DB "SPC - Rotate $"
  MSG_QUIT DB "Q - Quit $"
  MSG_LINES DB "Lines $"
  MSG_GAME_OVER DB "GAME OVER $"
  LOAD_STR	DB		'Loading...$'
  OPTION1	DB 	'START$'
  OPTION2	DB 	'INSTRUCTIONS$'
  OPTION3	DB 	'HIGHEST SCORE$'
  OPTION4	DB 	'QUIT$'
  PRESSESC  DB 'Press ESC to return to menu... ',0ah,0dh,'$'

  
  TITLECURSORCOL DB 02	
  TITLECURSORROW DB 10H
  BIRDPOSCOL DB 0AH	
  BIRDPOSROW DB 0AH		
  
  TEMP		DB		?
  TEMP2		DB 		1
  CHECKER 	DB 		0
  BUTTON_PRESSED		DB 		?
  BUTTON_PRESSED2		DB 		?
  
   MESSAGE1 DB '_________________________________________________',0ah,0dh
   		   DB ' | ####### ####### ####### ######    ###    ##### |',0ah,0dh
           DB ' |    #    #          #    #     #    #    #     #|',0ah,0dh
           DB ' |    #    #          #    #     #    #    #      |',0ah,0dh
           DB ' |    #    #####      #    ######     #     ##### |',0ah,0dh
           DB ' |    #    #          #    #   #      #          #|',0ah,0dh
           DB ' |    #    #          #    #    #     #    #     #|',0ah,0dh
           DB ' |    #    #######    #    #     #   ###    ##### |',0ah,0dh
           DB ' |                                                |',0ah,0dh
           DB ' |________________________________________________|',0ah,0dh,'$'
  
  MESSAGE2	DB '------------------------------------------------------------------------------',0ah,0dh,'$'
  MESSAGE3	DB '------------------------------------------------------------------------------',0ah,0dh,'$'

   FLAG	DB 	0
  FLAG2	DB 	0
  DELAY DB 0
   SCORE1 DB 0
  SCORE2 DB 0
  STRLEN DW 3
  PIPEROW DB 0
  PIPECOL DB 4FH
  PIPECOL2 DB 0
  PIPECOL3 DB 0
  PIPECOL4 DB 0
  RECORD_STR    DB 4H DUP('$')  ;length = original length of record + 1 (for $)
  READED_STR    DB 4H DUP('$')  ;length = original length of record + 1 (for $)
  RECORD_STR1   DB '000'
  PATHFILENAME  DB 'Hscore.txt', 00H
  FILEHANDLE    DW ?
  HIGHSCORE_TEXT DB 'HIGHSCORE: $'
   HOLE DB 4
  HOLE2 DB 4
  HOLE3 DB 4
  HOLE4 DB 4
  ;MAKE GAME OVER DB
  ;MAKE START GAME DB
  
  DELAY_CENTISECONDS DB 5
  SCREEN_WIDTH DW 320
  
  BLOCK_SIZE DW 5
  BLOCKS_PER_PIECE DW 4
  
  COLOR_CEMENTED_PIECE DW 40, 48, 54, 14, 42, 36, 34
  COLOR_FALLING_PIECE DW 39, 47, 55, 44, 6, 37, 33
  
  PIECES_ORIGIN LABEL WORD
  PIECE_T DW 1605, 1610, 1615, 3210 ;DOWN
          DW 10, 1610, 1615, 3210   ;RIGHT
		  DW 10, 1605, 1610, 1615   ;UP
		  DW 10, 1605, 1610, 3210   ;LEFT
  
  PIECE_J DW 1605, 1610, 1615, 3215
          DW 10, 15, 1610, 3210
		  DW 5, 1605, 1610, 1615
		  DW 10, 1610, 3205, 3210
  
  PIECE_L DW 1605, 1610, 1615, 3205
          DW 10, 1610, 3210, 3215
		  DW 15, 1605, 1610, 1615
		  DW 5, 10, 1610, 3210
  
  PIECE_Z DW 1605, 1610, 3210, 3215
          DW 15, 1610, 1615, 3210
		  DW 1605, 1610, 3210, 3215
		  DW 15, 1610, 1615, 3210
  
  PIECE_S DW 1610, 1615, 3205, 3210
          DW 10, 1610, 1615, 3215
		  DW 1610, 1615, 3205, 3210
		  DW 10, 1610, 1615, 3215
  
  PIECE_SQUARE DW 1605, 1610, 3205, 3210
               DW 1605, 1610, 3205, 3210
			   DW 1605, 1610, 3205, 3210
			   DW 1605, 1610, 3205, 3210
  
  PIECE_LINE DW 1600, 1605, 1610, 1615
             DW 10, 1610, 3210, 4810
			 DW 1600, 1605, 1610, 1615
			 DW 10, 1610, 3210, 4810
			 
  MSG_SCORE_BUFFER DB "000$"
  SCORE DW 0
  
  CURRENT_FRAME DW 0
  
  INSTRUCT  DB 'INSTRUCTIONS',0ah,0dh
  			DB '------------------------------------------------------------------------------',0ah,0dh
  			DB 'Press the SPACEBAR Button to hard drop a block. use left and right arrow keys to',0ah,0dh
  			DB 'move the block. Each line that fills clears and scores by one. ',0ah,0dh
  			DB 'Reach the highest point by beating the previous high score!,',0ah,0dh
  			DB ' ',0ah,0dh
  			DB ' ',0ah,0dh
  			DB ' ',0ah,0dh
  			DB 'Press ESC to return to menu... ',0ah,0dh,'$'

  STAR    DB '-------------------------------------------------------------------------------',0ah,0dh
        DB '                               |      /\      |                                ',0ah,0dh
        DB '                               |  ___/  \___  |                                ',0ah,0dh
        DB '                               |  \  _()_  /  |                                ',0ah,0dh
        DB '                               |   \/    \/   |                                ',0ah,0dh
        DB '                               |   /  /\  \   |                                ',0ah,0dh
        DB '                               |  /__/  \__\  |                                ',0ah,0dh
        DB '-------------------------------------------------------------------------------',0ah,0dh,'$'

		
  DELAY_STOPPING_POINT_CENTISECONDS DB 0
  DELAY_INITIAL DB 0
  
  RANDOM_NUMBER DB 0
  
  MUST_QUIT DB 0
  
  CEMENT_COUNTER DB 0
  
  PLAYER_INPUT_PRESSED DB 0
  
  CURRENT_PIECE_COLOR_INDEX DW 0
  NEXT_PIECE_COLOR_INDEX DW 0
  NEXT_PIECE_ORIENTATION_INDEX DW 0
  
  PIECE_DEFINITION DW 0
  PIECE_ORIENTATION_INDEX DW 0
  
  PIECE_BLOCKS DW 0, 0, 0, 0
  PIECE_POSITION DW 0
  PIECE_POSITION_DELTA DW 0
DATASEG ENDS  
;----------------------------------------------------------- 
CODESEG SEGMENT PARA 'Code' 
  ASSUME SS:STACKSEG, DS:DATASEG, CS:CODESEG
  
  
START:
  MOV AX, DATASEG
  MOV DS, AX

  MENU:
  		MOV FLAG, 0
  		CALL _TITLE
  		MOV HOLE, 4
  		MOV HOLE2, 4
  		MOV HOLE3, 4
  		MOV HOLE4, 4
  		MOV PIPECOL, 0
  		MOV PIPECOL2, 0
  		MOV PIPECOL3, 0
  		MOV PIPECOL4, 0
      MOV SCORE1, 0
      MOV SCORE2, 0
      MOV SCORE, 0

_LOOP_TITLE:
    CALL _GET_KEY

	MOV		DL, TITLECURSORCOL ;col
	MOV		DH, TITLECURSORROW ;row
	CALL	_SET_CURSOR

	MOV		AL, '*'
	MOV		AH, 02H
	MOV		DL, AL
	INT		21H

	CALL	_DELAY  		

	CMP BUTTON_PRESSED2, 0DH ;enter key is pressed
  	JNE NEXTU
    JMP CHECK_OPTION
	
	NEXTU:
	CMP BUTTON_PRESSED, 4BH ;cursor moves left when left key is pressed
  	JE _LEFT
  	CMP BUTTON_PRESSED, 4DH ;cursor moves right when right key is pressed
  	JE _RIGHT
	
	JMP _LOOP_TITLE
	
	JMP EXIT
	
_RIGHT:;when right button is pressed(from right to left)
		CMP TEMP2, 4
		JE	ENDR
  		INC TEMP2
		CMP TEMP2, 1
		JE FIRSTR
		CMP TEMP2, 2
		JE FRIGHT
		CMP TEMP2, 3
		JE SRIGHT
		CMP TEMP2, 4
		JE TRIGHT

		FIRSTR:;moves cursor to the first option at the menu
		MOV TITLECURSORCOL, 02
		CALL _TITLE
		JMP ENDR

		FRIGHT:;moves cursor to the second option at the menu
		ADD TITLECURSORCOL, 0AH
		CALL _TITLE
		JMP ENDR

		SRIGHT:;moves cursor to the third option at the menu
		ADD TITLECURSORCOL, 11H
		CALL _TITLE
		JMP ENDR

		TRIGHT:;moves cursor to the last option at the menu
		ADD TITLECURSORCOL, 12H
		CALL _TITLE
		JMP ENDR

		ENDR:
		JMP _LOOP_TITLE
		
_LEFT:;when left button is pressed(from left to right)
		CMP TEMP2, 1
		JE	ENDL
		DEC TEMP2
		CMP TEMP2, 1
		JE FIRSTL
		CMP TEMP2, 2
		JE FLEFT
		CMP TEMP2, 3
		JE SLEFT
		CMP TEMP2, 4
		JE TLEFT

		FIRSTL:;moves cursor to the first option at the menu
		MOV TITLECURSORCOL, 02
		CALL _TITLE
		JMP ENDL

		FLEFT:;moves cursor to the second option at the menu
		SUB TITLECURSORCOL, 11H
		CALL _TITLE
		JMP ENDL

		SLEFT:;moves cursor to the third option at the menu
		SUB TITLECURSORCOL, 12H
		CALL _TITLE
		JMP ENDL

		TLEFT:;moves cursor to the last option at the menu
		SUB TITLECURSORCOL, 0AH
		CALL _TITLE
		JMP ENDL

		ENDL:
		JMP _LOOP_TITLE
	
	CHECK_OPTION:
		CMP TEMP2, 1
		JNE CHECKT2
    ;JMP START_GAME

    CHECKT2:
		CMP TEMP2, 2
		JE INSTRUCTIONS
		CMP TEMP2, 3
		JE HIGHSCOREPAGE1
		
HIGHSCOREPAGE1:
  MOV FLAG, 04
  CALL _CLEAR_SCREEN_LOAD

  MOV DL, 0
  MOV DH, 0
  CALL _SET_CURSOR
  
  LEA DX, STAR
  MOV AH, 09H
  INT 21H

  MOV DL, 1FH
  MOV DH, 08H
  CALL _SET_CURSOR

  LEA DX, HIGHSCORE_TEXT
  MOV AH, 09H
  INT 21H

  CALL FILEREAD
  LEA DX, READED_STR
  MOV AH, 09H
  INT 21H

  MOV DL, 0
  MOV DH, 14H
  CALL _SET_CURSOR

  LEA DX, PRESSESC
  MOV AH, 09H
  INT 21H

  LOOPER1:
  CALL _GET_KEY
  JMP LOOPER1

		
		JMP EXIT

		INSTRUCTIONS:
		MOV FLAG, 2
		CALL _CLEAR_SCREEN_LOAD
		MOV DL, 00
		MOV DH, 00
		CALL _SET_CURSOR
		LEA DX, INSTRUCT
		CALL _PRINT_TEXT

		INSTRUCTION_LOOP:
				CALL _GET_KEY
			JMP INSTRUCTION_LOOP

	


	
	
 	
  JMP _LOOP_TITLE

  JMP EXIT
  
  CALL INITIALIZATION
  
  JMP EXIT
;----------------------------------------------------------- 
;Procedures
;----------------------------------------------------------- 

HIGHSCOREPAGE PROC NEAR
  MOV FLAG, 04
  CALL _CLEAR_SCREEN_LOAD

  MOV DL, 0
  MOV DH, 0
  CALL _SET_CURSOR
  
  LEA DX, STAR
  MOV AH, 09H
  INT 21H

  MOV DL, 1FH
  MOV DH, 08H
  CALL _SET_CURSOR

  LEA DX, HIGHSCORE_TEXT
  MOV AH, 09H
  INT 21H

  CALL FILEREAD
  LEA DX, READED_STR
  MOV AH, 09H
  INT 21H

  MOV DL, 0
  MOV DH, 14H
  CALL _SET_CURSOR

  LEA DX, PRESSESC
  MOV AH, 09H
  INT 21H

  LOOPER:
  CALL _GET_KEY
  JMP LOOPER

HIGHSCOREPAGE ENDP

_PRINT_TEXT PROC NEAR
	MOV AH, 09H
	INT 21H
	RET
_PRINT_TEXT ENDP

_CLEAR_SCREEN_TITLE PROC NEAR
			MOV AX, 0600H
			MOV BH, 07H
			MOV CX, 0000H
			MOV DX, 184FH
			INT 10H
			MOV AX, 0600H
			MOV BH, 57H
			MOV CX, 0301H
			MOV DX, 0D4EH
			INT 10H
			MOV AX, 0600H
			MOV BH, 57H
			MOV CX, 0F01H
			MOV DX, 114EH
			INT 10H
			RET
_CLEAR_SCREEN_TITLE ENDP

FILEREAD PROC NEAR
  ;open file
  MOV AH, 3DH           ;requst open file
  MOV AL, 00            ;read only; 01 (write only); 10 (read/write)
  LEA DX, PATHFILENAME
  INT 21H
  ;JC DISPLAY_ERROR1
  MOV FILEHANDLE, AX

  ;read file
  MOV AH, 3FH           ;request read record
  MOV BX, FILEHANDLE    ;file handle
  MOV CX, STRLEN            ;record length
  LEA DX, READED_STR    ;address of input area
  INT 21H
  ;JC DISPLAY_ERROR2
  ;CMP AX, 00            ;zero bytes read?
  ;JE DISPLAY_ERROR3


  ;close file handle
  MOV AH, 3EH           ;request close file
  MOV BX, FILEHANDLE    ;file handle
  INT 21H

RET
FILEREAD ENDP


_GET_KEY	PROC	NEAR
			MOV		AH, 01H		;check for input
			INT		16H

			JZ		__LEAVETHIS

			MOV		AH, 00H		;get input	MOV AH, 10H; INT 16H
			INT		16H
			CMP AL, 1BH			;compares AL to 'esc'
 			;JE CHECK_2				;exits when 'esc' is pressed
 			JNE __LEAVETHIS
 			
 			CHECK_2:
 			CMP FLAG, 1
 			JLE __LEAVETHIS
 			JMP MENU

	__LEAVETHIS:
			MOV 	BUTTON_PRESSED2, AL
			MOV		BUTTON_PRESSED, AH
			RET
_GET_KEY 	ENDP

_TITLE PROC NEAR
  CALL _CLEAR_SCREEN_TITLE
 ;title
  MOV DL, 01
  MOV DH, 03H
  CALL _SET_CURSOR
  LEA DX, MESSAGE1
  CALL _PRINT_TEXT


 ;selection 
  MOV DL, 01
  MOV DH, 0FH
  CALL _SET_CURSOR
  LEA DX, MESSAGE2
  CALL _PRINT_TEXT 
  MOV DL, 03
  MOV DH, 10H
  CALL _SET_CURSOR
  LEA DX, OPTION1
  CALL _PRINT_TEXT
  MOV DL, 0DH
  MOV DH, 10H
  CALL _SET_CURSOR
  LEA DX, OPTION2
  CALL _PRINT_TEXT  
  MOV DL, 1EH
  MOV DH, 10H
  CALL _SET_CURSOR
  LEA DX, OPTION3
  CALL _PRINT_TEXT
  MOV DL, 30H
  MOV DH, 10H
  CALL _SET_CURSOR
  LEA DX, OPTION4
  CALL _PRINT_TEXT
  MOV DL, 01
  MOV DH, 11H
  CALL _SET_CURSOR
  LEA DX, MESSAGE3
  CALL _PRINT_TEXT


  RET
_TITLE ENDP

_DELAY PROC	NEAR
			MOV BP, 2 ;lower value faster
			MOV SI, 2 ;lower value faster
		DELAY2:
			DEC BP
			NOP
			JNZ DELAY2
			DEC SI
			CMP SI, 0
			JNZ DELAY2
			RET
_DELAY ENDP

_CLEAR_SCREEN_LOAD PROC NEAR
			MOV AX, 0600H
			MOV BH, 07H
			MOV CX, 0000H
			MOV DX, 184FH
			INT 10H
			RET
_CLEAR_SCREEN_LOAD ENDP

_SET_CURSOR	PROC NEAR
			;MOV DL,	;column
			;MOV DH,	;row
			MOV AH, 02H
			MOV BH, 00H
			INT 10H
			RET
_SET_CURSOR ENDP

_LOADING	PROC NEAR			
			CALL _CLEAR_SCREEN_LOAD

			MOV		DL, 22H
			MOV		DH, 11
			CALL	_SET_CURSOR

			;display loading
			MOV		AH, 09H
			LEA		DX, LOAD_STR
			INT		21H

			MOV		TEMP, 00

	__ITERATE:
			;set cursor
			MOV		DL, TEMP
			MOV		DH, 12
			CALL	_SET_CURSOR

			MOV		AL, 0DBH
			MOV		AH, 02H
			MOV		DL, AL
			INT		21H

			CALL	_DELAY

			INC		TEMP
			CMP		TEMP, 50H
			JE		DONE

			JMP		__ITERATE

		DONE:
			RET


_LOADING		ENDP

PROCEDURE_DISPLAY_SCORE PROC NEAR
  MOV AX, [SCORE]
  MOV DL, 100
  DIV DL
  MOV CL, '0'
  ADD CL, AL
  MOV [MSG_SCORE_BUFFER], CL
  
  MOV AL, AH
  XOR AH, AH
  MOV DL, 10
  DIV DL
  MOV CL, '0'
  ADD CL, AL
  MOV [MSG_SCORE_BUFFER + 1], CL
  
  MOV CL, '0'
  ADD CL, AH
  MOV [MSG_SCORE_BUFFER + 2], CL
  
  MOV BX, MSG_SCORE_BUFFER
  MOV DH, 15
  MOV DL, 26
  CALL PROCEDURE_PRINT_AT
  
  RET
PROCEDURE_DISPLAY_SCORE ENDP

PROCEDURE_PRINT_AT PROC NEAR
  PUSH BX
  MOV AH, 2
  XOR BH, BH
  INT 10H
  
  MOV AH, 9
  POP DX
  INT 21H
  
  RET
PROCEDURE_PRINT_AT ENDP

PROCEDURE_RANDOM_NEXT_PIECE PROC FAR
  CALL PROCEDURE_DELAY
  
  MOV BL, 7
  CALL PROCEDURE_GENERATE_RANDOM_NUMBER
  MOV [NEXT_PIECE_COLOR_INDEX], AX
  
  MOV BL, 4
  CALL PROCEDURE_GENERATE_RANDOM_NUMBER
  
  MOV [NEXT_PIECE_ORIENTATION_INDEX], AX
  
  RET
PROCEDURE_RANDOM_NEXT_PIECE ENDP

PROCEDURE_ATTEMPT_LINE_REMOVAL PROC FAR
  PUSH CX
  
  MOV DI, 47815
  MOV CX, 104
  
  ATTEMPT_LINE_REMOVAL_LOOP:
    CALL PROCEDURE_IS_HORIZONTAL_LINE_FULL
	TEST AL, AL
	JZ ATTEMPT_LINE_REMOVAL_FULL_LINE_FOUND
	
	SUB DI, [SCREEN_WIDTH]
	LOOP ATTEMPT_LINE_REMOVAL_LOOP
	
	JMP ATTEMPT_LINE_REMOVAL_NO_LINE_FOUND
	
	ATTEMPT_LINE_REMOVAL_FULL_LINE_FOUND:
	
	  ATTEMPT_LINE_REMOVAL_SHIFT_LINES_DOWN_LOOP:
	    PUSH CX
		PUSH DI
		
		MOV SI, DI
		SUB SI, [SCREEN_WIDTH]
		
		MOV CX, 50
		
		PUSH DS
		PUSH ES
		MOV AX, 0A000H
		MOV DS, AX
		MOV ES, AX
		REP MOVSB
		POP ES
		POP DS
		
		POP DI
		POP CX
		
		SUB DI, [SCREEN_WIDTH]
		
		LOOP ATTEMPT_LINE_REMOVAL_SHIFT_LINES_DOWN_LOOP
		
		XOR DL, DL
		MOV CX, 50
		CALL PROCEDURE_DRAW_LINE
		
		MOV AL, 1
		JMP ATTEMPT_LINE_REMOVAL_DONE
		
	  ATTEMPT_LINE_REMOVAL_NO_LINE_FOUND:
	    XOR AL, AL
		
	ATTEMPT_LINE_REMOVAL_DONE:
	  POP CX
	  RET
PROCEDURE_ATTEMPT_LINE_REMOVAL ENDP

PROCEDURE_IS_HORIZONTAL_LINE_FULL PROC NEAR
  PUSH CX
  PUSH DI
  
  MOV CX, 50
  
  IS_HORIZONTAL_LINE_FULL_LOOP:
    CALL PROCEDURE_READ_PIXEL
	TEST DL, DL
	JZ IS_HORIZONTAL_LINE_FULL_FAILURE
	
	INC DI
	LOOP IS_HORIZONTAL_LINE_FULL_LOOP
	
	XOR AX, AX
	JMP IS_HORIZONTAL_LINE_FULL_LOOP_DONE
	
  IS_HORIZONTAL_LINE_FULL_FAILURE:
    MOV AL, 1
	
  IS_HORIZONTAL_LINE_FULL_LOOP_DONE:
    POP DI
	POP CX
	
  RET
PROCEDURE_IS_HORIZONTAL_LINE_FULL ENDP

PROCEDURE_GENERATE_RANDOM_NUMBER PROC NEAR
  MOV AL, [RANDOM_NUMBER]
  ADD AL, 31
  MOV [RANDOM_NUMBER], AL
  
  DIV BL
  MOV AL, AH
  XOR AH, AH
  
  RET
PROCEDURE_GENERATE_RANDOM_NUMBER ENDP

PROCEDURE_COPY_PIECE PROC NEAR
  PUSH DS
  PUSH ES
  
  MOV AX, CS
  MOV DS, AX
  MOV ES, AX
  
  MOV DI, PIECE_BLOCKS
  
  MOV AX, [PIECE_ORIENTATION_INDEX]
  
  MOV SI, [PIECE_DEFINITION]
  
  PUSH CX
  MOV CL, 3
  
  SHL AX, CL
  
  POP CX
  
  ADD SI, AX
  
  MOV CX, 4
  
  REP MOVSW
  
  POP ES
  POP DS
  
  RET
PROCEDURE_COPY_PIECE ENDP

PROCEDURE_APPLY_DELTA_AND_DRAW_PIECE PROC FAR
  MOV DL, 0
  CALL PROCEDURE_DRAW_PIECE
  
  MOV AX, [PIECE_POSITION]
  ADD AX, [PIECE_POSITION_DELTA]
  MOV [PIECE_POSITION], AX
  
  MOV BX, [CURRENT_PIECE_COLOR_INDEX]
  SHL BX, 1
  MOV DL, [COLOR_FALLING_PIECE + BX]
  CALL PROCEDURE_DRAW_PIECE
  
  RET
PROCEDURE_APPLY_DELTA_AND_DRAW_PIECE ENDP

PROCEDURE_DRAW_PIECE PROC NEAR
  DRAW_PIECE_LOOP:
    MOV DI, [PIECE_POSITION]
	
	MOV BX, CX
	SHL BX, 1
	SUB BX, 2
	ADD DI, [PIECE_BLOCKS + BX]
	
	MOV BX, [BLOCK_SIZE]
	CALL PROCEDURE_DRAW_SQUARE
	
	LOOP DRAW_PIECE_LOOP
	
  RET
PROCEDURE_DRAW_PIECE ENDP

PROCEDURE_CAN_PIECE_BE_PLACED PROC FAR
  MOV CX, [BLOCKS_PER_PIECE]
  
  CAN_PIECE_BE_PLACED_LOOP:
    MOV DI, [PIECE_POSITION]
	
	MOV BX, CX
	SHL BX, 1
	SUB BX, 2
	ADD DI, [PIECE_BLOCKS + BX]
	
	PUSH CX
	
	MOV BX, 1
	
	MOV CX, [BLOCK_SIZE]
	
  CAN_PIECE_BE_PLACED_LINE_BY_LINE_LOOP:
    CALL PROCEDURE_IS_LINE_AVAILABLE
	TEST AL, AL
	JNE CAN_PIECE_BE_PLACED_FAILURE
	
	ADD DI, [SCREEN_WIDTH]
	LOOP CAN_PIECE_BE_PLACED_LINE_BY_LINE_LOOP
	
	POP CX
	
	LOOP CAN_PIECE_BE_PLACED_LOOP
	
	XOR AX, AX
	JMP CAN_PIECE_BE_PLACED_SUCCESS
	
  CAN_PIECE_BE_PLACED_FAILURE:
    MOV AL, 1
	
	POP CX
	
  CAN_PIECE_BE_PLACED_SUCCESS:
    RET
PROCEDURE_CAN_PIECE_BE_PLACED ENDP

PROCEDURE_ADVANCE_ORIENTATION PROC FAR
  MOV AX, [PIECE_ORIENTATION_INDEX]
  INC AX
  AND AX, 3
  MOV [PIECE_ORIENTATION_INDEX], AX
  
  CALL PROCEDURE_COPY_PIECE
  
  RET
PROCEDURE_ADVANCE_ORIENTATION ENDP

PROCEDURE_READ_CHARACTER PROC NEAR
  MOV AH, 1
  INT 16H
  JNZ READ_CHARACTER_KEY_WAS_PRESSED
  
  RET
  
  READ_CHARACTER_KEY_WAS_PRESSED:
    MOV AH, 0
	INT 16H
	
	PUSH AX
	MOV AH, 6
	MOV DL, 0FFH
	INT 21H
	POP AX
	
	HANDLE_INPUT:
	  CMP AL, 's'
	  JE MOVE_RIGHT
	  
	  CMP AL, 'a'
	  JE MOVE_LEFT
	  
	  CMP AL, ' '
	  JE ROTATE
	  
	  CMP AL, 'q'
	  JE QUIT
	  
	  RET
	
	QUIT:
	  MOV [MUST_QUIT], 1
	  RET
	  
	ROTATE:
	  PUSH [PIECE_ORIENTATION_INDEX]
	  
	  CALL PROCEDURE_ADVANCE_ORIENTATION
	  
	  CALL PROCEDURE_CAN_PIECE_BE_PLACED
	  TEST AL, AL
	  JZ ROTATE_PERFORM
	  
	  POP [PIECE_ORIENTATION_INDEX]
	  CALL PROCEDURE_COPY_PIECE
	  
	  RET
	  
	ROTATE_PERFORM:
	  POP [PIECE_ORIENTATION_INDEX]
	  CALL PROCEDURE_COPY_PIECE
	  
	  XOR DL, DL
	  CALL PROCEDURE_DRAW_PIECE
	  
	  CALL PROCEDURE_ADVANCE_ORIENTATION
	  
	  MOV AL, [RANDOM_NUMBER]
	  ADD AL, 11
	  MOV [RANDOM_NUMBER], AL
	  
	  RET
	  
	MOVE_RIGHT:
	  MOV [PLAYER_INPUT_PRESSED], 1
	  
	  MOV CX, [BLOCKS_PER_PIECE]
	  MOVE_RIGHT_LOOP:
	    MOV DI, [PIECE_POSITION]
		
		MOV BX, CX
		SHL BX, 1
		SUB BX, 2
		ADD DI, [PIECE_BLOCKS + BX]
		
		ADD DI, [BLOCK_SIZE]
		
		MOV BX, [SCREEN_WIDTH]
		CALL PROCEDURE_IS_LINE_AVAILABLE
		
		TEST AL, AL
		JNZ MOVE_RIGHT_DONE
		
		LOOP MOVE_RIGHT_LOOP
		
		MOV AX, [PIECE_POSITION_DELTA]
		ADD AX, [BLOCK_SIZE]
		MOV [PIECE_POSITION_DELTA], AX
		
	  MOVE_RIGHT_DONE:
	    MOV AL, [RANDOM_NUMBER]
	    ADD AL, 3
	    MOV [RANDOM_NUMBER], AL
	  
	    RET
	MOVE_LEFT:
	  MOV [PLAYER_INPUT_PRESSED], 1
	  
	  MOV CX, [BLOCKS_PER_PIECE]
	  MOVE_LEFT_LOOP:
	    MOV DI, [PIECE_POSITION]
		
		MOV BX, CX
		SHL BX, 1
		SUB BX, 2
		ADD DI, [PIECE_BLOCKS + BX]
		
		DEC DI
		
		MOV BX, [SCREEN_WIDTH]
		CALL PROCEDURE_IS_LINE_AVAILABLE
		
		TEST AL, AL
		JNZ MOVE_LEFT_DONE
		
		LOOP MOVE_LEFT_LOOP
		
		MOV AX, [PIECE_POSITION_DELTA]
		SUB AX, [BLOCK_SIZE]
		MOV [PIECE_POSITION_DELTA], AX
		
	  MOVE_LEFT_DONE:
	    MOV AL, [RANDOM_NUMBER]
		ADD AL, 5
		MOV [RANDOM_NUMBER], AL
		
		RET
PROCEDURE_READ_CHARACTER ENDP

PROCEDURE_CAN_MOVE_DOWN PROC FAR
  PUSH CX
  PUSH DI
  
  MOV CX, [BLOCK_SIZE]
  
  CAN_MOVE_DOWN_FIND_DELTA:
    ADD DI, [SCREEN_WIDTH]
	LOOP CAN_MOVE_DOWN_FIND_DELTA
	
	MOV BX, 1
	CALL PROCEDURE_IS_LINE_AVAILABLE
	
	TEST AL, AL
	JNZ CAN_MOVE_DOWN_OBSTACLE_FOUND
	
	XOR AX, AX
	JMP CAN_MOVE_DOWN_DONE
	
  CAN_MOVE_DOWN_OBSTACLE_FOUND:
    MOV AX, 1

  CAN_MOVE_DOWN_DONE:
    POP DI
	POP CX
	
	RET
PROCEDURE_CAN_MOVE_DOWN ENDP
	
PROCEDURE_IS_LINE_AVAILABLE PROC NEAR
  PUSH BX
  PUSH CX
  PUSH DI
  
  MOV CX, [BLOCK_SIZE]
  
  IS_LINE_AVAILABLE_LOOP:
    CALL PROCEDURE_READ_PIXEL
	TEST DL, DL
	JNZ IS_LINE_AVAILABLE_OBSTACLE_FOUND
	
	IS_LINE_AVAILABLE_LOOP_NEXT_PIXEL:
	  ADD DI, BX
	  LOOP IS_LINE_AVAILABLE_LOOP
	  
	  XOR AX, AX
	  JMP IS_LINE_AVAILABLE_LOOP_DONE
	  
	IS_LINE_AVAILABLE_OBSTACLE_FOUND:
	  PUSH BX
	  MOV BX, [CURRENT_PIECE_COLOR_INDEX]
	  SHL BX, 1
	  MOV AL, [COLOR_FALLING_PIECE + BX]
	  CMP DL, AL
	  POP BX
	  JNE IS_LINE_AVAILABLE_FAILURE
	  
	  JMP IS_LINE_AVAILABLE_LOOP_NEXT_PIXEL
	  
	IS_LINE_AVAILABLE_FAILURE:
	  MOV AL, 1
	  
	IS_LINE_AVAILABLE_LOOP_DONE:
	  POP DI
	  POP CX
	  POP BX
	  
	  RET
PROCEDURE_IS_LINE_AVAILABLE ENDP

PROCEDURE_DELAY PROC NEAR
  PUSH BX
  PUSH CX
  PUSH DX
  PUSH AX
  
  XOR BL, BL
  MOV AH, 2CH
  INT 21H
  
  MOV AL, [RANDOM_NUMBER]
  ADD AL, DL
  MOV [RANDOM_NUMBER], AL
  
  MOV [DELAY_INITIAL], DH
  
  ADD DL, [DELAY_CENTISECONDS]
  CMP DL, 100
  JB DELAY_SECOND_ADJUSTMENTS_DONE
  
  SUB DL, 100
  MOV BL, 1
  
  DELAY_SECOND_ADJUSTMENTS_DONE:
    MOV [DELAY_STOPPING_POINT_CENTISECONDS], DL
	
  READ_TIME_AGAIN:
    INT 21H
	
	TEST BL, BL
	JE MUST_BE_WITHIN_SAME_SECOND
	
	CMP DH, [DELAY_INITIAL]
	JE READ_TIME_AGAIN
	
	PUSH DX
	SUB DH, [DELAY_INITIAL]
	CMP DH, 2
	POP DX
	JAE DONE_DELAY
	
	JMP CHECK_STOPPING_POINT_REACHED
	
	MUST_BE_WITHIN_SAME_SECOND:
	  CMP DH, [DELAY_INITIAL]
	  JNE DONE_DELAY
	  
	CHECK_STOPPING_POINT_REACHED:
	  CMP DL, [DELAY_STOPPING_POINT_CENTISECONDS]
	  JB READ_TIME_AGAIN
	  
	DONE_DELAY:
	  POP AX
	  POP DX
	  POP CX
	  POP BX
	  
	  RET
PROCEDURE_DELAY ENDP

PROCEDURE_DRAW_RECTANGLE PROC FAR
  PUSH DI
  PUSH DX
  PUSH CX
  
  MOV CX, AX
  
  DRAW_RECTANGLE_LOOP:
    PUSH CX
	PUSH DI
	MOV CX, BX
	CALL PROCEDURE_DRAW_LINE
	
	POP DI
	
	ADD DI, [SCREEN_WIDTH]
	
	POP CX
	
	LOOP DRAW_RECTANGLE_LOOP
	
	POP CX
	POP DX
	POP DI
	
	RET
PROCEDURE_DRAW_RECTANGLE ENDP

PROCEDURE_DRAW_SQUARE PROC
  MOV AX, BX
  CALL PROCEDURE_DRAW_RECTANGLE
  
  RET
PROCEDURE_DRAW_SQUARE ENDP

PROCEDURE_DRAW_LINE PROC NEAR
  CALL PROCEDURE_DRAW_PIXEL
  
  INC DI
  
  LOOP PROCEDURE_DRAW_LINE
  
  RET
PROCEDURE_DRAW_LINE ENDP

PROCEDURE_DRAW_LINE_VERTICAL PROC FAR
  CALL PROCEDURE_DRAW_PIXEL
  
  ADD DI, [SCREEN_WIDTH]
  
  LOOP PROCEDURE_DRAW_LINE_VERTICAL
  
  RET
PROCEDURE_DRAW_LINE_VERTICAL ENDP

PROCEDURE_DRAW_PIXEL PROC NEAR
  PUSH AX
  PUSH ES
  
  MOV AX, 0A000H
  MOV ES, AX
  MOV ES:[DI], DL
  
  POP ES
  POP AX
  
  RET
PROCEDURE_DRAW_PIXEL ENDP

PROCEDURE_READ_PIXEL PROC NEAR
  PUSH AX
  PUSH ES
  
  MOV AX, 0A000H
  MOV ES, AX
  MOV DL, ES:[DI]
  
  POP ES
  POP AX
  
  RET
PROCEDURE_READ_PIXEL ENDP

PROCEDURE_DRAW_BORDER PROC FAR
  MOV DL, 200
  
  MOV BX, 4
  MOV AX, 200
  
  XOR DI, DI
  CALL PROCEDURE_DRAW_RECTANGLE
  
  MOV BX, 317
  MOV AX, 4
  
  XOR DI, DI
  CALL PROCEDURE_DRAW_RECTANGLE
  
  MOV DI, 62720
  CALL PROCEDURE_DRAW_RECTANGLE
  
  RET
PROCEDURE_DRAW_BORDER ENDP
  
PROCEDURE_DRAW_SCREEN PROC FAR
  CALL PROCEDURE_DRAW_BORDER
  
  DRAW_SCREEN_PLAY_AREA:
    MOV DL, 27
	
	MOV CX, 52
	MOV DI, 14214
	CALL PROCEDURE_DRAW_LINE
	
	MOV CX, 52
	MOV DI, 48134
	CALL PROCEDURE_DRAW_LINE
	
	MOV CX, 105
	MOV DI, 14534
	CALL PROCEDURE_DRAW_LINE_VERTICAL
	
	MOV CX, 105
	MOV DI, 14585
	CALL PROCEDURE_DRAW_LINE_VERTICAL
	
  DRAW_SCREEN_NEXT_PIECE_AREA:
    MOV DI, 16199
	MOV CX, 31
	CALL PROCEDURE_DRAW_LINE
	
	MOV DI, 25799
	MOV CX, 31
	CALL PROCEDURE_DRAW_LINE
	
	MOV DI, 16199
	MOV CX, 31
	CALL PROCEDURE_DRAW_LINE_VERTICAL
	
	MOV DI, 16230
	MOV CX, 31
	CALL PROCEDURE_DRAW_LINE_VERTICAL
	
  DRAW_SCREEN_STRINGS:
    MOV DH, 21
	MOV DL, 4
	MOV BX, MSG_AUTHOR
	CALL PROCEDURE_PRINT_AT
	
	MOV DH, 11
	MOV DL, 25
	MOV BX, MSG_NEXT
	CALL PROCEDURE_PRINT_AT
	
	MOV DH, 8
	MOV DL, 4
	MOV BX, MSG_LEFT
	CALL PROCEDURE_PRINT_AT
	
	MOV DH, 10
	MOV DL, 4
	MOV BX, MSG_RIGHT
	CALL PROCEDURE_PRINT_AT
	
	MOV DH, 12
	MOV DL, 4
	MOV BX, MSG_ROTATE
	CALL PROCEDURE_PRINT_AT
	
	MOV DH, 14
	MOV DL, 4
	MOV BX, MSG_QUIT
	CALL PROCEDURE_PRINT_AT
	
	MOV BX, MSG_LINES
	MOV DH, 16
	MOV DL, 24
	CALL PROCEDURE_PRINT_AT
	
	; mov bx, msg_asmtris
    ; mov dh, 3
    ; mov dl, 16
    ; call procedure_print_at
	
	RET
PROCEDURE_DRAW_SCREEN ENDP  
  
PROCEDURE_DISPLAY_LOGO PROC NEAR
  MOV AX, [CURRENT_FRAME]
  AND AX, 3
  JZ DISPLAY_LOGO_BEGIN
  
  RET
  
  DISPLAY_LOGO_BEGIN: 
    MOV DI, 4905
	
	MOV CX, 20
	DISPLAY_LOGO_HORIZONTAL_LOOP:
	  MOV AX, [CURRENT_FRAME]
	  AND AX, 8
	  
	  PUSH CX
	  MOV CL, 3
	  
	  SHR AL, CL
	  
	  ADD AX, DI
	  AND AL, 1
	  
	  SHL AL, CL
	  
	  POP CX
	  
	  ADD AL, 192
	  MOV DL, AL
	  MOV BX, 5
	  CALL PROCEDURE_DRAW_SQUARE
	  
	  PUSH DI
	  ADD DI, 6400
	  
	  CALL PROCEDURE_DRAW_SQUARE
	  
	  POP DI
	  ADD DI, BX
	  LOOP DISPLAY_LOGO_HORIZONTAL_LOOP
	  
	  MOV DI, 4905
	  
	MOV CX, 5
	DISPLAY_LOGO_VERTICAL_LOOP:
      MOV AX, [CURRENT_FRAME]
      AND AX, 8
	  
	  PUSH CX
	  MOV CL, 3
	  
	  SHR AL, CL
	  PUSH AX
	  
	  MOV AX, DI
	  MOV BL, 160
	  DIV BL
	  
	  XOR AH, AH
	  SHR AX, 1
	  
	  AND AL, 1
	  
	  POP BX
	  ADD AL, BL
	  AND AL, 1
	  
	  SHL AL, CL
	  
	  POP CX
	  
	  ADD AL, 192
	  MOV DL, AL
	  MOV BX, 5
	  CALL PROCEDURE_DRAW_SQUARE
	  
	  PUSH DI
	  ADD DI, 100
	  
	  CALL PROCEDURE_DRAW_SQUARE
	  
	  POP DI
	  ADD DI, 1600
	  LOOP DISPLAY_LOGO_VERTICAL_LOOP
	  
	  RET
PROCEDURE_DISPLAY_LOGO ENDP

PROCEDURE_DISPLAY_GAME_OVER PROC FAR
  XOR DL, DL
  MOV AX, 45
  MOV BX, 100
  MOV DI, 19550
  CALL PROCEDURE_DRAW_RECTANGLE
  
  MOV DL, 40
  MOV AX, 16
  MOV BX, 88
  MOV DI, 29560
  CALL PROCEDURE_DRAW_RECTANGLE
  
  MOV DH, 12
  MOV DL, 16
  MOV BX, MSG_GAME_OVER
  CALL PROCEDURE_PRINT_AT
  
  RET
PROCEDURE_DISPLAY_GAME_OVER ENDP
  ;all code here
  
INITIALIZATION PROC NEAR
    MOV AX, 13H
    INT 10H
  
    MOV AX, 0305H
    XOR BX, BX
    INT 16H
  
    CALL PROCEDURE_RANDOM_NEXT_PIECE
  
    CALL PROCEDURE_DRAW_SCREEN
  
  NEW_PIECE:
    CALL PROCEDURE_DISPLAY_SCORE
	
	MOV [PIECE_POSITION], 14550
	
	MOV AX, [NEXT_PIECE_COLOR_INDEX]
	MOV [CURRENT_PIECE_COLOR_INDEX], AX
	
	PUSH CX
	MOV CL, 5
	
	SHL AX, CL
	
	ADD AX, OFFSET PIECES_ORIGIN
	MOV [PIECE_DEFINITION], AX
	
	MOV AX, [NEXT_PIECE_ORIENTATION_INDEX]
	MOV [PIECE_ORIENTATION_INDEX], AX
	
	CALL PROCEDURE_COPY_PIECE
	
	CALL PROCEDURE_CAN_PIECE_BE_PLACED
	TEST AL, AL
	JNZ GAME_OVER1
	
	GAME_OVER1:
	  CALL PROCEDURE_DISPLAY_GAME_OVER
	
	CALL PROCEDURE_RANDOM_NEXT_PIECE
	
  DISPLAY_NEXT_PIECE:
    MOV DI, 17805
	MOV BX, 20
	MOV DL, 0
	CALL PROCEDURE_DRAW_SQUARE
	
	PUSH [CURRENT_PIECE_COLOR_INDEX]
	PUSH [PIECE_DEFINITION]
	PUSH [PIECE_ORIENTATION_INDEX]
	PUSH [PIECE_POSITION]
	
	MOV AX, [NEXT_PIECE_COLOR_INDEX]
	MOV [CURRENT_PIECE_COLOR_INDEX], AX
	
	SHL AX, CL
	POP CX
	ADD AX, OFFSET PIECES_ORIGIN
	MOV [PIECE_DEFINITION], AX
	
	MOV AX, [NEXT_PIECE_ORIENTATION_INDEX]
	MOV [PIECE_ORIENTATION_INDEX], AX
	
	CALL PROCEDURE_COPY_PIECE
	
	MOV [PIECE_POSITION], 17805
	
	MOV BX, [CURRENT_PIECE_COLOR_INDEX]
	SHL BX, 1
	MOV DL, [COLOR_FALLING_PIECE + BX]
	CALL PROCEDURE_DRAW_PIECE
	
	POP [PIECE_POSITION]
	POP [PIECE_ORIENTATION_INDEX]
	POP [PIECE_DEFINITION]
	POP [CURRENT_PIECE_COLOR_INDEX]
	CALL PROCEDURE_COPY_PIECE
	
	MAIN_LOOP:
	  MOV AX, [CURRENT_FRAME]
	  INC AX
	  MOV [CURRENT_FRAME], AX
	  
	  CALL PROCEDURE_DELAY
	  
	  MOV [PIECE_POSITION_DELTA], 0
	  MOV [PLAYER_INPUT_PRESSED], 0
	  
	  CALL PROCEDURE_DISPLAY_LOGO
	  
	READ_INPUT:
	  CALL PROCEDURE_READ_CHARACTER
	  CMP [MUST_QUIT], 0
	  JNE DONE1
	  
	DONE1:
	  MOV AX, 3
	  INT 10H
	  RET
	  
	HANDLE_HORIZONTAL_MOVE:
	  MOV AX, [PIECE_POSITION_DELTA]
	  TEST AX, AX
	  JZ HANDLE_VERTICAL_MOVE
	  
	  CALL PROCEDURE_APPLY_DELTA_AND_DRAW_PIECE
	  
	HANDLE_VERTICAL_MOVE:
	  MOV CX, [BLOCKS_PER_PIECE]
	HANDLE_VERTICAL_MOVE_LOOP:
	  MOV DI, [PIECE_POSITION]
	  MOV BX, CX
	  SHL BX, 1
	  SUB BX, 2
	  ADD DI, [PIECE_BLOCKS + BX]
	  
	  CALL PROCEDURE_CAN_MOVE_DOWN
	  TEST AL, AL
	  JNZ HANDLE_VERTICAL_MOVE_LOOP_FAILURE
	  
	  LOOP HANDLE_VERTICAL_MOVE_LOOP
	  
	  JMP HANDLE_VERTICAL_MOVE_MOVE_DOWN_SUCCESS
	  
	HANDLE_VERTICAL_MOVE_LOOP_FAILURE:
	  MOV AL, [PLAYER_INPUT_PRESSED]
	  TEST AL, AL
	  
	  JZ HANDLE_V_MOVE_CEMENT_IMMEDIATELY
	  
	  MOV AL, [CEMENT_COUNTER]
	  DEC AL
	  MOV [CEMENT_COUNTER], AL
	  TEST AL, AL
	  JNZ MAIN_LOOP
	  
	HANDLE_V_MOVE_CEMENT_IMMEDIATELY:
	  MOV [CEMENT_COUNTER], 0
	  
	  MOV BX, [CURRENT_PIECE_COLOR_INDEX]
	  SHL BX, 1
	  MOV DL, [COLOR_CEMENTED_PIECE + BX]
	  CALL PROCEDURE_DRAW_PIECE
	  
	  XOR DX, DX
	  MOV CX, 20
	  
	HANDLE_V_MOVE_CEMENT_IMMEDIATE_ATTEMPT_CLEAR_LINES_LOOP:
	  PUSH DX
	  CALL PROCEDURE_ATTEMPT_LINE_REMOVAL
	  POP DX
	  
	  ADD DL, AL
	  LOOP HANDLE_V_MOVE_CEMENT_IMMEDIATE_ATTEMPT_CLEAR_LINES_LOOP
	  
	UPDATE_SCORE:
	  MOV AX, DX
	  MOV DL, [BLOCK_SIZE]
	  DIV DL
	  XOR AH, AH
	  
	  MOV DX, [SCORE]
	  ADD AX, DX
	  
	  CMP AX, 1000
	  JL SCORE_IS_NOT_OVER_1000
	  SUB AX, 1000
	  
	SCORE_IS_NOT_OVER_1000:
	  MOV [SCORE], AX
	  
	  JMP NEW_PIECE
	  
	HANDLE_VERTICAL_MOVE_MOVE_DOWN_SUCCESS:
	  MOV [CEMENT_COUNTER], 10
	  
	  MOV AX, [SCREEN_WIDTH]
	  MOV [PIECE_POSITION_DELTA], AX
	  
	  CALL PROCEDURE_APPLY_DELTA_AND_DRAW_PIECE
	  
	  JMP MAIN_LOOP
	  
	GAME_OVER:
	  CALL PROCEDURE_DISPLAY_GAME_OVER
	  
	GAME_OVER_LOOP:
	  CALL PROCEDURE_DISPLAY_LOGO
	  
	  CALL PROCEDURE_DELAY
	  
	  MOV AX, [CURRENT_FRAME]
	  INC AX
	  MOV [CURRENT_FRAME], AX
	  
	  MOV AH, 1
	  INT 16H
	  JZ GAME_OVER_LOOP
	  
	  XOR AH, AH
	  INT 16H
	  CMP AL, 'q'
	  JNE GAME_OVER_LOOP
	
	DONE2:
	  MOV AX, 3
	  INT 10H
	
  RET	
INITIALIZATION ENDP

EXIT:	
  MOV AH, 4CH
  INT 21H
CODESEG ENDS	
END START